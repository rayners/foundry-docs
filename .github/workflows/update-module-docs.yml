name: Update Module Documentation

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Module name to update documentation for'
        required: true
        type: choice
        options:
          - journeys-and-jamborees
          - argon-dragonbane
          - realms-and-reaches
          - seasons-and-stars
          - simple-calendar-compat
          - errors-and-echoes
          - familiar
      create_pr:
        description: 'Create PR for changes'
        required: false
        type: boolean
        default: true

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout documentation repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout dev-context repository
        uses: actions/checkout@v4
        with:
          repository: rayners/dev-context
          path: dev-context
          fetch-depth: 1

      - name: Determine module repository name
        id: module-repo
        run: |
          case "${{ github.event.inputs.module_name }}" in
            "journeys-and-jamborees")
              echo "repo_name=fvtt-journeys-and-jamborees" >> $GITHUB_OUTPUT
              ;;
            "argon-dragonbane")
              echo "repo_name=fvtt-argon" >> $GITHUB_OUTPUT
              ;;
            "realms-and-reaches")
              echo "repo_name=fvtt-realms-and-reaches" >> $GITHUB_OUTPUT
              ;;
            "seasons-and-stars")
              echo "repo_name=fvtt-seasons-and-stars" >> $GITHUB_OUTPUT
              ;;
            "simple-calendar-compat")
              echo "repo_name=fvtt-simple-calendar-compat" >> $GITHUB_OUTPUT
              ;;
            "errors-and-echoes")
              echo "repo_name=fvtt-errors-and-echoes" >> $GITHUB_OUTPUT
              ;;
            "familiar")
              echo "repo_name=fvtt-familiar" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unknown module: ${{ github.event.inputs.module_name }}"
              exit 1
              ;;
          esac

      - name: Checkout module repository
        uses: actions/checkout@v4
        with:
          repository: rayners/${{ steps.module-repo.outputs.repo_name }}
          path: module-source
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Create update branch
        if: github.event.inputs.create_pr == 'true'
        run: |
          BRANCH_NAME="docs/update-${{ github.event.inputs.module_name }}-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Run Claude Code to validate and update documentation
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            Validate and update the documentation for module "${{ github.event.inputs.module_name }}" following these steps:

            ## Context
            - Documentation site repository: Current working directory
            - Module source code: ./module-source/ directory
            - Development standards: ./dev-context/ directory
            - Module documentation location: ./${{ github.event.inputs.module_name }}/

            ## Validation and Update Tasks

            ### 1. Use the /validate-docs slash command
            Run: `/validate-docs ${{ github.event.inputs.module_name }}`

            ### 2. Cross-reference with module source
            - Check module-source/README.md for current features and status
            - Verify module-source/CHANGELOG.md for recent changes
            - Compare module-source/module.json for current version info
            - Review module-source/package.json for dependencies and scripts

            ### 3. Update documentation based on findings
            - Fix any date accuracy issues using proper `date` commands
            - Remove hyperbolic language ("works with all systems", "fully tested")
            - Update version references to match actual releases
            - Ensure feature claims match current module capabilities
            - Fix broken links, image paths, and formatting issues

            ### 4. Verify build compatibility
            - Run `npm run build` to ensure site builds successfully
            - Check that updated documentation integrates properly

            ### 5. Summary Report
            Provide a summary of:
            - Issues found and fixed
            - Content updated or corrected
            - Any recommendations for future maintenance

            Follow the quality standards from dev-context/documentation-standards.md and dev-context/foundry-development-practices.md.

          claude_args: '--allowed-tools "Bash(npm:*),Bash(git:*),Bash(date:*),Read,Write,Edit,Grep,Glob"'

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_ENV
          else
            git add .
            git commit -m "docs(${{ github.event.inputs.module_name }}): automated documentation update

            - Validated against current module source
            - Applied documentation quality standards
            - Fixed accuracy and formatting issues

            ü§ñ Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            echo "changes_made=true" >> $GITHUB_ENV
          fi

      - name: Push branch and create PR
        if: github.event.inputs.create_pr == 'true' && env.changes_made == 'true'
        run: |
          git push origin ${{ env.BRANCH_NAME }}

          gh pr create \
            --title "docs(${{ github.event.inputs.module_name }}): automated documentation update" \
            --body "## Automated Documentation Update

          This PR contains automated updates to the ${{ github.event.inputs.module_name }} documentation based on:
          - Current module source code validation
          - Documentation quality standards from dev-context
          - Link and formatting fixes
          - Date accuracy verification

          ### Changes Made
          - Applied documentation standards from dev-context/
          - Validated against module source in rayners/${{ steps.module-repo.outputs.repo_name }}
          - Fixed any accuracy, formatting, or link issues found

          ### Review Checklist
          - [ ] Documentation accurately reflects current module capabilities
          - [ ] No hyperbolic or unverified claims remain
          - [ ] All links and images work correctly
          - [ ] Site builds successfully (\`npm run build\`)

          ü§ñ Generated with [Claude Code](https://claude.ai/code)" \
            --head ${{ env.BRANCH_NAME }} \
            --base main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output summary
        run: |
          if [ "${{ env.changes_made }}" = "true" ]; then
            if [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
              echo "‚úÖ Documentation updated and PR created for ${{ github.event.inputs.module_name }}"
            else
              echo "‚úÖ Documentation updated for ${{ github.event.inputs.module_name }}"
            fi
          else
            echo "‚ÑπÔ∏è No documentation changes needed for ${{ github.event.inputs.module_name }}"
          fi